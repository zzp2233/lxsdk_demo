#ifndef __API_MODEM_H__
#define __API_MODEM_H__

// Automatically generated by header syncer
// time: 2024-09-11T17:24:41.097797400+08:00
//! header syncer start

#if 0
#ifndef NOTICE_STRUCT
#define NOTICE_STRUCT(name, fields)                                            \
    struct name {                                                              \
        fields                                                                 \
    }
#endif
#endif

// platform.h
// 不使用 modem 的时候，可以重定义下面几个函数来释放 comm 区
// comm start
void modem_fifo_push(u8 *buf, u16 rlen, u16 rindex, u16 buf_len);
void modem_huart_rx_cb(u16 cnt);
void modem_send_sta_rise_msg(void);
void modem_send_sta_fall_msg(void);
//comm end

bool modem_platform_init(void);
void modem_platform_init_end(void);
void modem_platform_exit(void);

bool modem_has_pending_data(void);
void modem_huart_sleep(void);
void modem_huart_wakeup(void);

/**
 * @brief 设置命令超时时间
 *
 * @param timeout 5ms单位
 */
void modem_platform_set_timeout(u16 timeout);

/**
 * @param error_code
 *      0 phone failure
 *      1 no connection to phone
 *      2 phone- adaptor link reserved
 *      3 operation not allowed
 *      4 operation not supported
 *      5 PH- SIM PIN required
 *      6 PH-FSIM PIN required
 *      7 PH-FSIM PUK required
 *      10 SIM not inserted
 *      11 SIM PIN required
 *      12 SIM PUK required
 *      13 SIM failure
 *      14 SIM busy
 *      15 SIM wrong
 *      16 incorrect password
 *      17 SIM PIN2 required
 *      18 SIM PUK2 required
 *      20 memory full
 *      21 invalid index
 *      22 not found
 *      23 memory failure
 *      24 text string too long
 *      25 invalid characters in text string
 *      26 dial string too long
 *      27 invalid characters in dial string
 *      30 no network service
 *      31 network timeout
 *      32 network not allowed - emergency calls only
 *      40 network personalization PIN required
 *      41 network personalization PUK required
 *      42 network subset personalization PIN required
 *      43 network subset personalization PUK required
 *      44 service provider personalization PIN required
 *      45 service provider personalization PUK required
 *      46 corporate personalization PIN required
 *      47 corporate personalization PUK required
 *      48 hidden key required
 *      49 EAP method not supported
 *      50 Incorrect parameters
 *      51 command implemented but currently disabled
 *      52 command aborted by user
 *      53 not attached to network due to MT functionality restrictions
 *      54 modem not allowed - MT restricted to emergency calls only
 *      55 operation not allowed because of MT functionality restrictions
 *      56 fixed dial number only allowed - called number is not a fixed dial number (refer 3GPP TS 22.101 [147])
 *      57 temporarily out of service due to other MT usage
 *      58 language/alphabet not supported
 *      59 unexpected data value
 *      60 system failure
 *      61 data missing
 *      62 call barred
 *      63 message waiting indication subscription failure
 *      100 unknown
 *      103 Illegal MS
 *      106 Illegal ME
 *      107 GPRS services not allowed
 *      108 GPRS services and non-GPRS services not allowed
 *      111 PLMN not allowed
 *      112 Location area not allowed
 *      113 Roaming not allowed in this location area
 *      114 GPRS services not allowed in this PLMN
 *      115 No Suitable Cells In Location Area
 *      118 CS domain not available
 *      119 ESM failure
 *      122 Congestion
 *      125 Not authorized for this CSG
 *      172 Semantically incorrect message
 *      173 Mandatory information element error
 *      174 Information element non-existent or not implemented
 *      175 Conditional IE error
 *      176 Protocol error, unspecified
 *      177 Operator Determined Barring
 *      126 insufficient resources
 *      127 missing or unknown APN
 *      128 unknown PDP address or PDP type
 *      129 user authentication failed
 *      130 activation rejected by GGSN, Serving GW or PDN GW
 *      131 activation rejected, unspecified
 *      132 service option not supported
 *      133 requested service option not subscribed
 *      134 service option temporarily out of order
 *      140 feature not supported
 *      141 semantic error in the TFT operation
 *      142 syntactical error in the TFT operation
 *      143 unknown PDP context
 *      144 semantic errors in packet filter(s)
 *      145 syntactical errors in packet filter(s)
 *      146 PDP context without TFT already activated
 *      149 PDP authentication failure
 *      171 Last PDN disconnection not allowed
 *      178 maximum number of PDP contexts reached
 *      179 requested APN not supported in current RAT and PLMN combination
 *      180 request rejected, Bearer Control Mode violation
 *      181 unsupported QCI value
 *      277 USIM/SIM application not active
 *      6000 通道堵塞
 *      6001 命令长度输入超限
 *      6002 短消息内容输入错误
 *      6003 命令不识别
 *      6004 命令参数不对
 *      6005 只支持 IPV4
 *      6006 只支持 IPV6
 *      6007 APN 鉴权失败
 *      6008 Unkown PDP address or PDP type (#28)
 *      6009 sysconfig 设置和当前支持的频段冲突
 *      6010 获取信息失败，请稍后重试
 *      6011 鉴权参数校验失败
 *      6012 鉴权参数校验失败超过最大次数
 *      6013 卡适配过程中禁止处理新命令
 *      6101 unicast state unstable
 *      6102 EMBMS not suupport
 *      6103 TMGI out of coverage
 *      6104 unicast out of service
 *      6105 exceed max number
 *      7000 unexpect hold result
 *      7001 hold_err2 reserved
 *      7002 hold_err3 reserved
 *      7003 invalid zid
 *      7003 invalid zid
 *      7004 invalid pid
 *      7005 invalid context
 *      7006 invalid zinfo
 *      7007 unpermmited hold operation
 *      7008 redundant hang up operation
 *      7009 chld err1 reserved
 *      7101 send UT request failed
 *      7103 UT authentication failed
 *      7104 UT parse result failed
 *      8000 at channel status clearing of srvcc
 */
void modem_cmd_notice(bool is_ok, u32 error_code);

// at.h
#define AT_LINE_BUF_SIZE            32

#define STATIC_ASSERT(COND, MSG)                                               \
    typedef char static_assertion_##MSG[(COND) ? 1 : -1]
#define NOTICE_STRUCT(name, fields)                                            \
    struct name {                                                              \
        fields                                                                 \
    };                                                                         \
    STATIC_ASSERT(sizeof(struct name) <= AT_LINE_BUF_SIZE, exceeds_##name)

#define ARRAY_SIZE(x)               (sizeof(x) / sizeof(x[0]))

typedef enum
{
    MODEM_EOK,
    MODEM_ERROR,
    MODEM_ETIMEOUT,
    MODEM_ENOINIT,
} modem_err_t;

enum
{
    AT_TYPE_CMD_BASE,
    AT_TYPE_CMD_SET,
    AT_TYPE_CMD_READ,
    AT_TYPE_CMD_TEST,
    AT_TYPE_ACTIVE_REPORT,
};

struct at_cmd_ctrl
{
    bool (*recv_header)(void *parser);
};

struct at_cmd_recv
{
    char *header;
    u8 index;
};

/**
 * @param n_5ms 5ms的等待单位
 * @return true 可以发送
 * @return false 需要等待
 */
bool modem_check_can_send(u32 n_5ms);

int modem_raw_write(const void *buf, u32 len);
int modem_raw_write_ascii(const u8 *buf, u32 len);

bool modem_at_recv_header(void         *parser,
                          const struct at_cmd_recv *cmd_recv,
                          int (*recv_items)(void *parser));

u8 modem_parser_get_msg(const void *parser);
void *modem_parser_get_arg(const void *parser);
void *modem_parser_get_line(const void *parser);
u8 modem_parser_get_eol(const void *parser);
u8 modem_parser_get_item(void *parser);
void modem_parser_item_inc(void *parser);

typedef int (*modem_recv_items_t)(void *parser);
typedef bool (*modem_recv_header_t)(void *parser);


// call.h
enum
{
    /// @brief +IMSCPI, call_notice_info
    MODEM_CALL_NOTICE_INFO,
    /// @brief ^DSCI, call_notice_state
    MODEM_CALL_NOTICE_STATE,
    /// @brief ^ORIG, call_notice_start
    MODEM_CALL_NOTICE_START,
    /// @brief ^CONF, call_notice_net_conn
    MODEM_CALL_NOTICE_NET_CONN,
    /// @brief ^CONN, call_notice_call_conn
    MODEM_CALL_NOTICE_CALL_CONN,
    /// @brief ^CEND, call_notice_end
    MODEM_CALL_NOTICE_END,
    /// @brief +IMSPLUS, call_notice_ring
    MODEM_CALL_NOTICE_RING,
    /// @brief +CLCC, call_notice_current_call
    MODEM_CALL_NOTICE_CURRENT_CALL,
};

typedef enum
{
    /// @brief 活动中
    MODEM_CALL_STATUS_ACTIVE,
    /// @brief 保持中
    MODEM_CALL_STATUS_HOLD,
    /// @brief 拨号中（MO呼叫）
    MODEM_CALL_STATUS_CALLING,
    /// @brief 振铃中（MO呼叫）
    MODEM_CALL_STATUS_ALERTING,
    /// @brief 来电建立中（MT呼叫）
    MODEM_CALL_STATUS_INCOMING,
    /// @brief 等待中
    MODEM_CALL_STATUS_WAITING,
    /// @brief 呼叫结束
    MODEM_CALL_STATUS_RELEASED,
} modem_call_status_t;

NOTICE_STRUCT(call_notice_info,
              /// @brief 1-7:第n路通话
              u8 id;
              /// @brief 呼叫信息
              /// 0:MO 过程中收到 Alert
              /// 1:MO 过程中收到 CallProceding
              /// 2:收到 Progress
              /// 3:Modify 到语音成功
              /// 5:语音或数据呼叫时无线资源配置完成指示
              /// 6:语音或数据呼叫时无线资源被释放
              /// 7:远端挂断流程开始的指示
              u8 info;
              /// @brief 呼叫进程描述
              /// 1:in-band
              /// 2:Destination address in non-PLMN/ISDN
              /// 3:Origination address in non-PLMN/ISDN
              /// 4:Call has returned to the PLMN/ISDN
              /// 8:In-band information or appropriate pattern now available
              /// 32:Call is end-to-end PLMN/ISDN
              /// 64:Queueing
              u8 prog_des;
              /// @brief 呼叫类型 0:语音呼叫 1:紧急呼叫
              u8 type;);
NOTICE_STRUCT(call_notice_state,
              /// @brief 1-7:第n路通话
              u8 id;
              /// @brief 0:主叫 1:被叫
              u8 dir;
              /// @brief 呼叫状态 @ref modem_call_status_t
              modem_call_status_t stat;
              /// @brief 0:语音业务 1:数据业务
              u8 type;
              /// @brief 0:不在多方通话 1:在多方通话
              u8 mpty;
              /// @brief 号码
              char number[16];
              /// @brief 地址类型
              u8 num_type;
              /// @brief 地址类型
              u8 bs_type;
              /// @brief 呼叫释放原因
              u8 cause;
              /// @brief 0:语音 1:视频
              u8 volte_call_type;);
NOTICE_STRUCT(call_notice_start,
              /// @brief 1-7:第n路通话
              u8 id;
              /// @brief 0:语音呼叫 9:紧急呼叫
              u8 type;);
NOTICE_STRUCT(call_notice_net_conn,
              /// @brief 1-7:第n路通话
              u8 id;);
NOTICE_STRUCT(call_notice_call_conn,
              /// @brief 1-7:第n路通话
              u8 id;
              /// @brief 0:语音呼叫 9:紧急呼叫
              u8 type;);
NOTICE_STRUCT(call_notice_end,
              /// @brief 1-7:第n路通话
              u8 id;
              u8 reserve;
              u8 status;
              u8 cause;);
NOTICE_STRUCT(
    call_notice_ring,
    /// @brief 0:音频设备关闭 1:音频设备开启 2:通知开始本地铃音 3:通知停止本地铃音
    u8 mode;
    /// @brief 8000:8k采样率 16000:16k采样率 1-7:call id
    u16 arg;);
NOTICE_STRUCT(call_notice_current_call,
              /// @brief 呼叫标识 1-7
              u8 id;
              /// @brief 0:主叫 1:背叫
              u8 dir;
              /// @ref modem_call_status_t
              modem_call_status_t stat;
              /// @brief 0:语言业务
              u8 mode;
              /// @brief 0:非多方通话 1:多方通话
              u8 mpty;
              /// @brief 呼叫号码
              char number[16];);

void modem_call_notice(uint evt, void *param, u8 type);

/**
 * @brief Dial
 *
 * @param number
 */
modem_err_t modem_call_dial(const char *number);

/**
 * @brief Answer
 *
 */
modem_err_t modem_call_answer(void);

/**
 * @brief Hangup call
 *
 */
modem_err_t modem_call_hangup(void);

/**
 * @brief List current calls
 *
 */
modem_err_t modem_call_get_current_call(void);

// sms.h
enum
{
    MODEM_SMS_NOTICE_DELIVER,
    MODEM_SMS_NOTICE_MSG_REPORT,
};

struct sms_scts
{
    u8 year;
    u8 month;
    u8 day;
    u8 hour;
    u8 minute;
    u8 second;
    u8 tz;
};

struct sms_notice_deliver
{
    char            smsc[20]; // ts 23.11 RP-OA length is [2,11]
    u8              type;
    char            oa[22];
    u8              pid;
    u8              dcs;
    struct sms_scts scts;
    u8              udl;

    // ts 23.04 clause 9.2.3.24.1
    // ucs2 max is 70, 70*3 in utf8
    char ud[70 * 3];
};

void modem_sms_notice(uint evt, void *param, u8 type);

// always ucs2 coding(unicode big endian)
modem_err_t modem_sms_submit_ucs2(const char *number, const u8 *ucs2_msg, u16 ucs2_len);

// mtcas.h
enum
{
    /// @brief +CPBR; mtcas_notice_read_pb
    MODME_MTCAS_NOTICE_SELECT_PB,
    MODME_MTCAS_NOTICE_READ_PB,
    MODME_MTCAS_NOTICE_FIND_PB,
    MODME_MTCAS_NOTICE_WRITE_PB,
    /// @brief +CSQ; mtcas_notice_req_sq
    MODME_MTCAS_NOTICE_REQ_SQ,
    /// @brief +CMSQR; mtcas_notice_sq_report
    MODME_MTCAS_NOTICE_SQ_REPORT,
};

NOTICE_STRUCT(mtcas_notice_read_pb, u8 index; char number[16]; u8 type;
              char name[14];);

NOTICE_STRUCT(
    mtcas_notice_req_sq,
    /// @brief 0:<= -113dBm 1:-111dBm 2..30:-109...-53dBm 31:>= -51dBm 99:未知
    u8 rssi;
    /// @brief 无效
    u8 ber;);

NOTICE_STRUCT(
    mtcas_notice_sq_report,
    /// @brief 0:<= -113dBm 1:-111dBm 2..30:-109...-53dBm 31:>= -51dBm 99:未知
    u8 rssi;
    /// @brief 无效
    u8 ber;);

void modem_mtcas_notice(uint evt, void *param, u8 type);

/**
 * @param from [1,255]
 * @param to [1,255]
 */
modem_err_t modem_mtcas_get_contains(u16 from, u16 to);

/**
 * @brief Request signal quality
 *
 */
modem_err_t modem_mtcas_req_sq(void);

/**
 * @brief Set signal quality reporting
 *
 */
modem_err_t modem_mtcas_set_sq_report(u8 enable, u8 range);

// general.h
enum
{
    /// @brief +CGMI; general_notice_req_manu_id
    MODEM_GENERAL_REQ_MANU_ID,
    /// @brief +CGMM; general_notice_req_model_id
    MODEM_GENERAL_REQ_MODEL_ID,
    /// @brief +CGMR; general_notice_req_revision_id
    MODEM_GENERAL_REQ_REVISION_ID,
    /// @brief +CGSN;
    MODEM_GENERAL_REQ_PSN_ID,
    /// @brief +CSCS;
    MODEM_GENERAL_SEL_TE_CHAR,
    /// @brief +CIMI; general_notice_req_ims_id
    MODEM_GENERAL_REQ_IMS_ID,
    /// @brief +ICCID; general_notice_req_iccid
    MODEM_GENERAL_REQ_ICCID,
};

typedef enum
{
    TE_PSN_SN,
    TE_PSN_IMEI,
    TE_PSN_IMEISV,
    TE_PSN_SVN,
} te_psn_t;

typedef enum te_chset
{
    TE_CHSET_GSM,
    TE_CHSET_HEX,
    TE_CHSET_IRA,
    TE_CHSET_PCCPxxx,
    TE_CHSET_PCDN,
    TE_CHSET_UCS2,
    TE_CHSET_UTF8,
    TE_CHSET_8859n,
    TE_CHSET_8859C,
    TE_CHSET_8859A,
    TE_CHSET_8859G,
    TE_CHSET_8859H,
} te_chset_t;

void modem_general_notice(uint evt, void *param, u8 type);

/**
 * @brief Request manufacturer identification
 *
 */
modem_err_t modem_general_req_manu_id(void);

/**
 * @brief Request model identification
 *
 */
modem_err_t modem_general_req_model_id(void);

/**
 * @brief Request product serial number identification
 *
 */
modem_err_t modem_general_req_psn_id(te_psn_t psn);

/**
 * @brief Select TE character set
 *
 * @param chset 通过te_chset_t选择
 */
modem_err_t modem_general_set_chset(te_chset_t chset);

/**
 * @brief Request international mobile subscriber identity
 *
 */
modem_err_t modem_general_req_imsi(void);

/**
 * @brief Request Integrated CircuitCardIdentification
 *
 */
modem_err_t modem_general_req_iccid(void);

NOTICE_STRUCT(general_notice_req_manu_id, char manu[32];);
NOTICE_STRUCT(general_notice_req_model_id, char model[32];);
NOTICE_STRUCT(general_notice_req_revision_id, char revision[32];);
NOTICE_STRUCT(general_notice_req_ims_id, char imsi[32];);
NOTICE_STRUCT(general_notice_req_iccid, char iccid[21];);

// net.h
enum
{
    /// @brief +CMMMI; net_notice_status_report
    MODEM_NET_STATUS_REPORT,
    /// @brief +CEREG; net_notice_eps_registraion_read
    MODEM_NET_EPS_REGISTRAION,
    /// @brief +COPS; net_notice_eps_registraion_report
    MODEM_NET_PLMN_SELECTION,
};

NOTICE_STRUCT(net_notice_status_report,
              /// @brief 时区
              char time_zone;
              /// @brief 夏令时 0:没有调整 1:+1小时 2:+2小时
              u8 sav_time;
              /// @brief 运营商长名
              char oper_long[5];
              /// @brief 运营商短名
              char oper_short[5];
              /// @brief 通用时间 年/月/日,时:分:秒
              char univer_time[17];
              /// @brief LSA ID(Identification of Localised Service Area)
              /* char lsa_id[7]; */
              /// @brief oper_long 格式 0:GSM7BIT 1:UCS2
              /* u8 dcs_long; */
              /// @brief oper_short 格式 0:GSM7BIT 1:UCS2
              /* u8 dcs_short; */);

NOTICE_STRUCT(
    net_notice_eps_registraion_read,
    /// @brief 0: 关闭网络注册上报 1:打开网络注册上报 2:打开网络注册和位置信息上报
    u8 n;
    /// @brief 0:未注册（MT不搜索） 1:已注册（非漫游） 2:未注册（MT尝试附着或搜索） 3:注册被拒 4:未知 5:已注册（漫游）
    u8 stat;
    /// @brief 跟踪区编码
    char tac[2];
    /// @brief 小区识别
    char ci[4];);

NOTICE_STRUCT(
    net_notice_eps_registraion_report,
    /// @brief 0:未注册（MT不搜索） 1:已注册（非漫游） 2:未注册（MT尝试附着或搜索） 3:注册被拒 4:未知 5:已注册（漫游）
    u8 stat;
    /// @brief 跟踪区编码
    char tac[2];
    /// @brief 小区识别
    char ci[4];);

NOTICE_STRUCT(
    net_notice_plmn_selection,
    /// @brief 0:自动搜网 1:手动搜网 2:注销网络 3:仅设置<format> 4:手动/自动模式
    u8 mode;
    /// @brief 0:长格式（最多16B） 1:短格式（最多8B） 2:数字类型
    u8 format;
    /// @brief 运营商名称
    char oper[16];
    /// @brief 0:未知 1:可用 2:当前 3:禁用
    u8 stat;
    /// @brief 0:GSM 7:E-UTRAN
    u8 act;
    /// @brief 0:TDD 1:FDD
    u8 sub_act;);

void modem_net_notice(uint evt, void *param, u8 type);

/**
 * @brief Read EPS network registration
 *
 */
modem_err_t modem_net_read_eps_regist(void);

/**
 * @brief Read PLMN selection
 *
 */
modem_err_t modem_net_read_plmn_select(void);
//! header syncer end

#endif
